<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bit by bit</title>
    <link>https://shaolang.github.io/</link>
    <description>Recent content on Bit by bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 04 Jun 2021 22:21:36 +0800</lastBuildDate><atom:link href="https://shaolang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Phoenix Pubsub Comms Across Nodes</title>
      <link>https://shaolang.github.io/posts/2021-06-04-phoenix-pubsub-comms-across-nodes/</link>
      <pubDate>Fri, 04 Jun 2021 22:21:36 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2021-06-04-phoenix-pubsub-comms-across-nodes/</guid>
      <description>Phoenix PubSub makes cross-nodes publish-subscribe extremely simple: setting up one for single node is the same as setting up multiple. This post covers the steps in doing so.
First, run mix new pub_sub --sup to generate a new project. Then add {:phoenix_pubsub, &amp;quot;~&amp;gt; 2.0&amp;quot;} as a dependency in mix.exs. Open lib/pub_sub/application.ex to add Phoenix PubSub to the supervision tree:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  defmodule PubSub.</description>
    </item>
    
    <item>
      <title>Gradle in Tight Security Environments</title>
      <link>https://shaolang.github.io/posts/2021-03-05-gradle-in-tight-security-environments/</link>
      <pubDate>Fri, 05 Mar 2021 13:30:43 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2021-03-05-gradle-in-tight-security-environments/</guid>
      <description>In tightly controlled, secured environments *cough, corporate, cough*, using Gradle requires a little bit more setup. The following works if the environment has an artifact repository such as Artifactory in place.
In settings.gradle.kts, configure pluginManagement as follows:
pluginManagement { repositories { maven { url = uri(&amp;#34;https://path.to/corporate/artifact/repository&amp;#34;) credentials { username = &amp;#34;approved-corporate-userid-to-access-repository&amp;#34; password = &amp;#34;password-of-the-approved-corporate-userid&amp;#34; } } } The snippet above assumes the corporate artifact repository uses Maven layout in organizing the artifacts.</description>
    </item>
    
    <item>
      <title>Storybook.JS with Shadow-CLJS</title>
      <link>https://shaolang.github.io/posts/2021-02-14-storybook.js-with-shadow-cljs/</link>
      <pubDate>Sun, 14 Feb 2021 08:45:00 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2021-02-14-storybook.js-with-shadow-cljs/</guid>
      <description>Storybook.JS is a very interesting development tool from JavaScript ecosystem1. This tutorial shows how we can use it with Shadow-CLJS. The code resides at storybook.js-with-shadow-cljs repo.
Prerequisites The tutorial uses the following:
 Java version 11 Node.js version 14.15.4 Reagent version 1.0.0 Shadow-CLJS version 2.11.8 Storybook.JS version 6.1.17  Make sure the first two are installed prior the tutorial. The others will be installed along the way.
Getting a simple React app running Let&amp;rsquo;s create the scaffold to kick-start:</description>
    </item>
    
    <item>
      <title>SQLite3: Use Nth Value in First Record of Selected Groups</title>
      <link>https://shaolang.github.io/posts/2021-01-14-sqlite3-use-nth-value-in-first-record-of-selected-groups/</link>
      <pubDate>Thu, 14 Jan 2021 14:09:53 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2021-01-14-sqlite3-use-nth-value-in-first-record-of-selected-groups/</guid>
      <description>In a previous post where I used pandas to transform the following (with some amendments to the column names):
id | book_id | bdate | is_borrowed 0 | abc | 2020-01-01 | True 1 | abc | 2020-02-02 | True 2 | abc | 2020-03-03 | True 3 | def | 2020-04-04 | False 4 | def | 2020-05-05 | False 5 | ghi | 2020-06-06 | True 6 | ghi | 2020-07-07 | True 7 | ghi | 2020-08-08 | True 8 | jkl | 2020-09-09 | False 9 | jkl | 2020-10-10 | False 10 | jkl | 2020-11-11 | False to:</description>
    </item>
    
    <item>
      <title>Neovim on Windows</title>
      <link>https://shaolang.github.io/posts/2020-09-19-neovim-on-windows/</link>
      <pubDate>Sat, 19 Sep 2020 18:54:39 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-09-19-neovim-on-windows/</guid>
      <description>I may be missing something but Neovim requires some additional configuration to make it work on Windows; the following are the things I&amp;rsquo;ve done to make Neovim work on a Windows machine that also makes it co-exist with Vim.1 After downloading Neovim and unzipping that to somewhere, the first thing to do is to configure it through init.vim.
init.vim aka Neovim&amp;rsquo;s .vim/_vimrc Most online articles say init.vim should reside at ~/.</description>
    </item>
    
    <item>
      <title>Property-Based Testing: From Erlang/Elixir to Clojure Part 2</title>
      <link>https://shaolang.github.io/posts/2020-07-10-property-based-testing-from-elixir-to-clojure-part2/</link>
      <pubDate>Fri, 10 Jul 2020 22:00:00 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-07-10-property-based-testing-from-elixir-to-clojure-part2/</guid>
      <description>In the previous post that covered chapter 5 of Property-Based Testing with PropEr, Erlang, and Elixir, I ported most of the code from the book with very few modifications. Code in this post that covers chapter 6: Properties-Driven Development are not straight ports. All the code done [so far] are hosted at https://github.com/shaolang/pbtic I&amp;rsquo;m using test.check as the property-based testing tool in Clojure.
In this chapter (of the book), it tackles the Back to the Checkout code kata: calculate the total price of the items scanned at the checkout and handle specials correctly.</description>
    </item>
    
    <item>
      <title>pandas: Use Nth Value in First Record of Selected Groups</title>
      <link>https://shaolang.github.io/posts/2020-06-13-pandas-use-nth-value-in-first-rec-of-selected-groups/</link>
      <pubDate>Sat, 13 Jun 2020 08:12:09 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-06-13-pandas-use-nth-value-in-first-rec-of-selected-groups/</guid>
      <description>How do you transform the following data frame:
| book_id | date | is_borrowed 0 | abc | 2020-01-01 | True 1 | abc | 2020-02-02 | True 2 | abc | 2020-03-03 | True 3 | def | 2020-04-04 | False 4 | def | 2020-05-05 | False 5 | ghi | 2020-06-06 | True 6 | ghi | 2020-07-07 | True 7 | ghi | 2020-08-08 | True 8 | jkl | 2020-09-09 | False 9 | jkl | 2020-10-10 | False 10 | jkl | 2020-11-11 | False to the following, i.</description>
    </item>
    
    <item>
      <title>MSDOS Script to Set Up PostgreSQL</title>
      <link>https://shaolang.github.io/posts/2020-05-23-dos-script-to-setup-postgresql/</link>
      <pubDate>Sat, 23 May 2020 20:14:32 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-05-23-dos-script-to-setup-postgresql/</guid>
      <description>Don&amp;rsquo;t ask &amp;ldquo;Why Windows?&amp;rdquo;
Not being a database expert and needing to set up PostgreSQL database in a Windows machine to do simple development with minimal fuss, the following is a simplistic MSDOS script to automate that:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  @ECHO OFF @BREAK ON @SETLOCAL SET PG_HOME=path_to_pg_home SET superuser=postgres IF NOT DEFINED PGDATA GOTO :MISSINGPGDATA IF EXIST %PGDATA% GOTO :DBEXISTS SET PGBIN=%PG_HOME%\bin ECHO Initialzing database with superuser name: %superuser% %PGBIN%\initdb -D %PGDATA% --pwprompt --username=%superuser% ^  --no-locale --encoding=UTF8 ^  --auth-local=trust --auth-host=trust  GOTO :EOF :MISSINGPGDATA ECHO Please set the environment variable PGDATA before running again.</description>
    </item>
    
    <item>
      <title>Getting Started With Chronicle Queue</title>
      <link>https://shaolang.github.io/posts/2020-04-26-getting-started-with-chronicle-queue/</link>
      <pubDate>Sun, 26 Apr 2020 16:30:00 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-04-26-getting-started-with-chronicle-queue/</guid>
      <description>Chronicle Queue is low-latency, broker-less, durable message queue. Its closest cousin is probably 0MQ, except that 0MQ doesn&amp;rsquo;t store the messages published and the open-source version of Chronicle Queue doesn&amp;rsquo;t support cross-machine communication1. Chronicle Queue&amp;rsquo;s biggest claim to fame is that it generates no garbage as it uses RandomAccessFiles as off-heap storage.
Chronicle Queue is producer-centric, i.e., applications built on Chronicle Queue cannot tell the producer to slow down in putting messages onto the queue (no back-pressure mechanics).</description>
    </item>
    
    <item>
      <title>pip Behind Corporate Firewalls</title>
      <link>https://shaolang.github.io/posts/2020-01-28-pip-behind-corporate-firewalls/</link>
      <pubDate>Tue, 28 Jan 2020 12:17:59 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2020-01-28-pip-behind-corporate-firewalls/</guid>
      <description>Corporate firewalls&amp;hellip; never mind, that&amp;rsquo;s a rant for another day.
To appease the corporate firewalls for pip, create %userprofile%\pip\pip.ini with the following content:
[global] trusted-host = pypi.python.org pypi.org files.pythonhosted.org Set the https_proxy and http_proxy environment settings, and pip install away to your heart&amp;rsquo;s content.
Note that this solution works since pip 10.0, and yup, works at least within the corporate firewalls that I&amp;rsquo;m behind currently.</description>
    </item>
    
    <item>
      <title>Genetic Algorithms Basics</title>
      <link>https://shaolang.github.io/posts/2019-11-22-genetic-algorithms-basics/</link>
      <pubDate>Tue, 26 Nov 2019 10:00:00 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2019-11-22-genetic-algorithms-basics/</guid>
      <description>Genetic algorithm is another branch of artificial intelligence that takes inspirations from Darwin&amp;rsquo;s theory of evolution. Genetic algorithm is useful in solving optimization problems where a good-enough solution is acceptable as opposed to best solution. Good-enough because getting the best solution can take a long time or a lot of resources to compute. For example, genetic algorithm is useful for solving timetable scheduling and bin packing problems. Not to be confused with the similarly named Genetic programming, genetic algorithm uses lists/arrays extensively; genetic programming uses trees instead.</description>
    </item>
    
    <item>
      <title>Ranking Data in MSExcel</title>
      <link>https://shaolang.github.io/posts/2019-08-16-ranking-data-in-msexcel/</link>
      <pubDate>Fri, 16 Aug 2019 21:25:48 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2019-08-16-ranking-data-in-msexcel/</guid>
      <description>MSExcel, despite its bad name for data analysis, can still be a very good tool to reach out to for one-off analysis jobs, especially when the output needs to be interactive. After all, nothing comes close to the reactivity &amp;ndash; as in reactive programming &amp;ndash; simple MSExcel formulae provide that do not require hardcore development skills.1
Getting our hands dirty Let&amp;rsquo;s say the requirement is to rank the customers&#39; YTD Trade Count and MTD Trade Count.</description>
    </item>
    
    <item>
      <title>Property-Based Testing: From Erlang/Elixir to Clojure</title>
      <link>https://shaolang.github.io/posts/2019-08-10-property-based-testing-from-elixir-to-clojure/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2019-08-10-property-based-testing-from-elixir-to-clojure/</guid>
      <description>Reading Property-Based Testing with PropEr, Erlang, and Elixir and following along the examples helped me in learning this exciting testing methodology; but it also left me wondering: have I really absorbed and internalized just by following along?
So, I reached out to Fred, got his approval, and started translating the code from Erlang/Elixir to Clojure with test.check. All the code done [so far] are hosted at https://github.com/shaolang/pbtic I&amp;rsquo;m using test.check as the property-based testing tool in Clojure.</description>
    </item>
    
    <item>
      <title>SQLite: show UTC timestamp as local time</title>
      <link>https://shaolang.github.io/posts/2019-06-24-sqlite-show-utc-timestamp-as-local-time/</link>
      <pubDate>Mon, 24 Jun 2019 21:12:03 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2019-06-24-sqlite-show-utc-timestamp-as-local-time/</guid>
      <description>A business unit asked me to compile some trading volume stats by trading hour. The good thing is that I have the following in SQLite database; the bad thing is the database stores the timestamp as follows:
timestamp column is stored as a string1, so rather than doing timezone arithmetic, I used SQLite&amp;rsquo;s built-in date/time functions instead:
WITH epochized AS ( SELECT STRFTIME(&#39;%s&#39;, [timestamp]) AS [epoch] -- convert to unix epoch FROM trades), localized AS ( SELECT TIME([epoch], &#39;unixepoch&#39;, &#39;localtime&#39;) -- convert epoch to local time FROM dropped_offsets), SELECT SUBSTR([localtime], 1, 2) AS [trading_hour] -- extract hour FROM localized; The above employs common table expressions for clarity; the actual combined them as one instead.</description>
    </item>
    
    <item>
      <title>Custom ExUnit.CaseTemplate</title>
      <link>https://shaolang.github.io/posts/2018-08-09-custom-exunit-casetemplate/</link>
      <pubDate>Thu, 09 Aug 2018 08:57:56 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2018-08-09-custom-exunit-casetemplate/</guid>
      <description>Creating custom ExUnit.Case is done simply by creating a module that use ExUnit.CaseTemplate. However, doing just that is not enough: when I run mix test, the terminal shows the following:
$ mix test Compiling 1 file (.ex) Generated dna app == Compilation error in file test/my_test.exs == ** (CompileError) test/my_test.exs:2: module MyCase is not loaded and could not be found (elixir) expanding macro: Kernel.use/1 test/my_test.exs:2: MyTest (module) (elixir) lib/code.ex:767: Code.require_file/2 (elixir) lib/kernel/parallel_compiler.</description>
    </item>
    
    <item>
      <title>Python Code Structure and Distribution</title>
      <link>https://shaolang.github.io/posts/2018-07-13-python-app-distribution/</link>
      <pubDate>Fri, 13 Jul 2018 23:30:15 +0800</pubDate>
      
      <guid>https://shaolang.github.io/posts/2018-07-13-python-app-distribution/</guid>
      <description>Probably it&amp;rsquo;s due to my inexperience in Python&amp;rsquo;s community/ecosystem, I find it amusing that Python community has no agreed standard in code organization. Yeah, The Hitchhiker&amp;rsquo;s Guide to Python! attempts to recommend some structure, but the popular pytest recommends something entirely different.
By adopting pytest&amp;rsquo;s recommendation&amp;ndash;i.e., putting code in src directory&amp;ndash;I need to make the some changes, changes that are not obvious to a noob like me:
 As my code modules are no longer on PYTHONPATH, I need to install pytest-pythonpath and add src to in pytest.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://shaolang.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaolang.github.io/about/</guid>
      <description>I like learning things, especially in how things work. My current weapons-of-choice are Clojure, JavaScript, Python, and Ruby (in alphabetical order). On the language front, I&amp;rsquo;m learning Elixir, Erlang, Haskell, Kotlin and Rust; on the application front, I&amp;rsquo;m learning pandas, scikit-learn, and Tensorflow. Why? &amp;lsquo;cos curiosity and fascination.
As the word goes, teaching is the best way to learn, hence this blog, even if the audience is only myself.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://shaolang.github.io/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shaolang.github.io/links/</guid>
      <description>List of interesting/helpful/queer/etc links:
Clojure  Clojure, Faster: optimizing Clojure when it matters Practical Data Coercion with Prismatic/schema: especially on how to make multiple coercion matchers work together Taming Advanced Compilation Bugs in ClojureScript Projects  Rust  A Survey of Rust GUI Libraries (as of 21 Aug 2020) Rust GUI: Introduction, a.k.a. the state of Rust GUI libraries (as of Jan 2021)  SQL  How do I insert a row which contains a foreign key?</description>
    </item>
    
  </channel>
</rss>
