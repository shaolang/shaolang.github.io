<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sqlite3 on Bit by bit</title>
    <link>https://shaolang.github.io/tags/sqlite3/</link>
    <description>Recent content in sqlite3 on Bit by bit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Jan 2021 14:09:53 +0800</lastBuildDate>
    <atom:link href="https://shaolang.github.io/tags/sqlite3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SQLite3: Use Nth Value in First Record of Selected Groups</title>
      <link>https://shaolang.github.io/posts/2021-01-14-sqlite3-use-nth-value-in-first-record-of-selected-groups/</link>
      <pubDate>Thu, 14 Jan 2021 14:09:53 +0800</pubDate>
      <guid>https://shaolang.github.io/posts/2021-01-14-sqlite3-use-nth-value-in-first-record-of-selected-groups/</guid>
      <description>In a previous post where I used pandas to transform the following (with some amendments to the column names):
id | book_id | bdate | is_borrowed 0 | abc | 2020-01-01 | True 1 | abc | 2020-02-02 | True 2 | abc | 2020-03-03 | True 3 | def | 2020-04-04 | False 4 | def | 2020-05-05 | False 5 | ghi | 2020-06-06 | True 6 | ghi | 2020-07-07 | True 7 | ghi | 2020-08-08 | True 8 | jkl | 2020-09-09 | False 9 | jkl | 2020-10-10 | False 10 | jkl | 2020-11-11 | False to:</description>
    </item>
    <item>
      <title>SQLite: show UTC timestamp as local time</title>
      <link>https://shaolang.github.io/posts/2019-06-24-sqlite-show-utc-timestamp-as-local-time/</link>
      <pubDate>Mon, 24 Jun 2019 21:12:03 +0800</pubDate>
      <guid>https://shaolang.github.io/posts/2019-06-24-sqlite-show-utc-timestamp-as-local-time/</guid>
      <description>A business unit asked me to compile some trading volume stats by trading hour. The good thing is that I have the following in SQLite database; the bad thing is the database stores the timestamp as follows:
trade idamount donetimestamp 11002019-06-01 01:01:01.111111 22002019-06-01 02:02:02.222222 33002019-06-01 03:03:03.333333 ... 1000100002019-06-24 23:59:59.999999 timestamp column is stored as a string1, so rather than doing timezone arithmetic, I used SQLite&amp;rsquo;s built-in date/time functions instead:
WITH epochized AS ( SELECT STRFTIME(&amp;#39;%s&amp;#39;, [timestamp]) AS [epoch] -- convert to unix epoch FROM trades), localized AS ( SELECT TIME([epoch], &amp;#39;unixepoch&amp;#39;, &amp;#39;localtime&amp;#39;) -- convert epoch to local time FROM dropped_offsets), SELECT SUBSTR([localtime], 1, 2) AS [trading_hour] -- extract hour FROM localized; The above employs common table expressions for clarity; the actual combined them as one instead.</description>
    </item>
  </channel>
</rss>
